name: Java CI with Gradle

# main 브랜치에 push가 발생할 경우 동작
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # Java 21 세팅
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    # Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # application.yml 작성
    - name: Create application.yml from template
      run: |
        cp src/main/resources/application.yml.template src/main/resources/application.yml
        envsubst < src/main/resources/application.yml.template > src/main/resources/application.yml
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

    # Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

    # DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

  run-docker-image-on-ec2:
      # build-docker-image 과정이 완료되어야 실행
      needs: build-docker-image
      runs-on: self-hosted

      steps:
        # 최신 이미지를 pull
        - name: docker pull
          run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

        # 기존의 컨테이너 중지
        - name: docker stop container
          run: sudo docker stop springapp 2>/dev/null || true

        # 최신 이미지를 컨테이너화하여 실행
        - name: docker run new container
          run: sudo docker run --name springapp --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

        # 미사용 이미지 정리
        - name: delete old docker image
          run: sudo docker system prune -f
